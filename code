{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bfs_paths(graph, start, goal):\n",
    "    queue = [(start, [start])]\n",
    "    result = []\n",
    "\n",
    "    while queue:\n",
    "        n, path = queue.pop(0)\n",
    "        if n == goal:\n",
    "            result.append(path)\n",
    "        else:\n",
    "            for m in graph[n] - set(path):\n",
    "                queue.append((m, path + [m]))\n",
    "    for i in result :\n",
    "        if len(i) == 6 :\n",
    "            print(i)\n",
    "      \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['A', 'D', 'B', 'C', 'E', 'F']\n",
      "['A', 'D', 'B', 'E', 'C', 'F']\n",
      "['A', 'D', 'C', 'B', 'E', 'F']\n",
      "['A', 'D', 'C', 'E', 'B', 'F']\n",
      "['A', 'D', 'E', 'B', 'C', 'F']\n",
      "['A', 'D', 'E', 'C', 'B', 'F']\n",
      "['A', 'B', 'D', 'C', 'E', 'F']\n",
      "['A', 'B', 'D', 'E', 'C', 'F']\n",
      "['A', 'B', 'C', 'D', 'E', 'F']\n",
      "['A', 'B', 'C', 'E', 'D', 'F']\n",
      "['A', 'B', 'E', 'D', 'C', 'F']\n",
      "['A', 'B', 'E', 'C', 'D', 'F']\n",
      "['A', 'C', 'D', 'B', 'E', 'F']\n",
      "['A', 'C', 'D', 'E', 'B', 'F']\n",
      "['A', 'C', 'B', 'D', 'E', 'F']\n",
      "['A', 'C', 'B', 'E', 'D', 'F']\n",
      "['A', 'C', 'E', 'D', 'B', 'F']\n",
      "['A', 'C', 'E', 'B', 'D', 'F']\n",
      "['A', 'E', 'D', 'B', 'C', 'F']\n",
      "['A', 'E', 'D', 'C', 'B', 'F']\n",
      "['A', 'E', 'B', 'D', 'C', 'F']\n",
      "['A', 'E', 'B', 'C', 'D', 'F']\n",
      "['A', 'E', 'C', 'D', 'B', 'F']\n",
      "['A', 'E', 'C', 'B', 'D', 'F']\n"
     ]
    }
   ],
   "source": [
    "bfs_paths(graph,'A','F')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "graph = {'A': set(['B','C','D','E','F']),\n",
    "         'B': set(['A','C','D','E','F']),\n",
    "         'C': set(['A','B','D','E','F']),\n",
    "         'D': set(['A','B','C','E','F']),\n",
    "         'E': set(['A','B','C','D','F']),\n",
    "         'F': set(['A','B','C','D','E'])}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if len(result) == 5 :\n",
    "        return result\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['세종', '울산', '평양', '여수', '서울', '인천', '광주', '독도', '부산', '대구', '강릉']\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

